{"version":3,"sources":["Enums/SelectBy.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectBy","TodoList","todos","selectedTodoId","setSelectedTodoId","isLoading","length","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","selectBy","setSelectBy","inputSearch","setInputSearch","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","useState","setIsLoading","foundUser","setFoundUser","useEffect","userId","finally","href","email","name","App","setTodos","completedFilter","setCompletedFilter","searchQuery","setSearchQuery","foundTodo","useMemo","find","selectedTodos","useCallback","filter","filteredTodos","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49b5b2c9.chunk.js","sourcesContent":["export enum SelectBy {\n  All,\n  Active,\n  Completed,\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  setSelectedTodoId: CallableFunction,\n  isLoading: boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setSelectedTodoId,\n  isLoading,\n}) => (\n  <>\n    {todos.length <= 0 && !isLoading ? (\n      <div>There is no todos</div>\n    ) : (\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId === todo.id,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodoId(todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className={`far ${selectedTodoId === todo.id\n                      ? 'fa-eye-slash'\n                      : 'fa-eye'}`}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )}\n  </>\n);\n","import { FC } from 'react';\nimport { SelectBy } from '../../Enums/SelectBy';\n\ntype Props = {\n  selectBy: number,\n  setSelectBy: CallableFunction,\n  inputSearch: string,\n  setInputSearch: CallableFunction,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  selectBy,\n  setSelectBy,\n  inputSearch,\n  setInputSearch,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectBy}\n          onChange={event => setSelectBy(+event.target.value)}\n        >\n          <option value={SelectBy.All}>All</option>\n          <option value={SelectBy.Active}>Active</option>\n          <option value={SelectBy.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={inputSearch}\n        onChange={(event) => setInputSearch(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {inputSearch.length > 0 && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setInputSearch('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  setSelectedTodoId: CallableFunction,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodoId,\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [foundUser, setFoundUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setFoundUser)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodoId(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            {foundUser && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${foundUser.email}`}>\n                  {foundUser.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { SelectBy } from './Enums/SelectBy';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [completedFilter, setCompletedFilter] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const foundTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId)\n  ), [todos, selectedTodoId]);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedTodos = useCallback(() => {\n    switch (completedFilter) {\n      case SelectBy.All:\n        return todos;\n      case SelectBy.Active:\n        return todos.filter(todo => !todo.completed);\n      case SelectBy.Completed:\n      default:\n        return todos.filter(todo => todo.completed);\n    }\n  }, [completedFilter, todos]);\n\n  const filteredTodos = useMemo(() => {\n    return selectedTodos()\n      .filter(todo => todo.title.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [searchQuery, todos, selectedTodos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectBy={completedFilter}\n                setSelectBy={setCompletedFilter}\n                inputSearch={searchQuery}\n                setInputSearch={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodoId={selectedTodoId}\n                    setSelectedTodoId={setSelectedTodoId}\n                    isLoading={isLoading}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId !== 0 && foundTodo && (\n        <TodoModal\n          selectedTodo={foundTodo}\n          setSelectedTodoId={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}