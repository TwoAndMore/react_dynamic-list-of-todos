{"version":3,"sources":["Enums/SelectBy.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectBy","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","currentTodo","TodoFilter","selectBy","setSelectBy","inputSearch","setInputSearch","value","onChange","event","target","All","Active","Completed","placeholder","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","foundUser","setFoundUser","useEffect","userId","finally","href","email","name","App","setTodos","filteredTodos","filter","selectedTodos","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebe6aa75.chunk.js","sourcesContent":["export enum SelectBy {\n  All,\n  Active,\n  Completed,\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: CallableFunction,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': selectedTodo?.id === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={todo.completed\n              ? 'has-text-success'\n              : 'has-text-danger'}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectedTodo((currentTodo: Todo | null) => {\n                if (currentTodo?.id === todo.id) {\n                  return null;\n                }\n\n                return todo;\n              })}\n            >\n              <span className=\"icon\">\n                <i className={`far ${selectedTodo?.id === todo.id\n                  ? 'fa-eye-slash'\n                  : 'fa-eye'}`}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { SelectBy } from '../../Enums/SelectBy';\n\ntype Props = {\n  selectBy: number,\n  setSelectBy: CallableFunction,\n  inputSearch: string,\n  setInputSearch: CallableFunction,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  selectBy,\n  setSelectBy,\n  inputSearch,\n  setInputSearch,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectBy}\n          onChange={event => setSelectBy(+event.target.value)}\n        >\n          <option value={SelectBy.All}>All</option>\n          <option value={SelectBy.Active}>Active</option>\n          <option value={SelectBy.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={inputSearch}\n        onChange={(event) => setInputSearch(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {inputSearch.length > 0 && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setInputSearch('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  setSelectedTodo: CallableFunction,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [foundUser, setFoundUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setFoundUser)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            {foundUser && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${foundUser.email}`}>\n                  {foundUser.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { SelectBy } from './Enums/SelectBy';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectBy, setSelectBy] = useState(0);\n  const [inputSearch, setInputSearch] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedTodos = () => {\n    switch (selectBy) {\n      case SelectBy.All:\n        return todos;\n      case SelectBy.Active:\n        return todos.filter(todo => !todo.completed);\n      case SelectBy.Completed:\n      default:\n        return todos.filter(todo => todo.completed);\n    }\n  };\n\n  const filteredTodos = selectedTodos()\n    .filter(todo => todo.title.toLowerCase().includes(inputSearch.toLowerCase()));\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectBy={selectBy}\n                setSelectBy={setSelectBy}\n                inputSearch={inputSearch}\n                setInputSearch={setInputSearch}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}